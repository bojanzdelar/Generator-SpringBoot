import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { {{entity.camel}} } from '@models/{{entity.kebab}}';

{%- for attribute in entity.attributes %}
{%- if 'userDefined' in attribute %}
import { {{attribute.type}} } from '@models/{{attribute.name_kebab}}';
{%- endif %}
{%- endfor %}

{%- for attribute in entity.attributes %}
{%- if 'userDefined' in attribute %}
import { {{attribute.type}}Service } from '@services/{{attribute.name_kebab}}.service';
{%- endif %}
{%- endfor %}

@Component({
  selector: 'app-{{entity.kebab}}-form',
  templateUrl: './{{entity.kebab}}-form.component.html',
  styleUrls: ['./{{entity.kebab}}-form.component.css'],
})
export class {{entity.camel}}FormComponent implements OnInit {
  @Input()
  set element(v: {{entity.camel}}) {
    this.form.patchValue(v);
  }

  @Output()
  process: EventEmitter<any> = new EventEmitter();

  title: string = 'Form';

  {%- for attribute in entity.attributes %}
  {%- if 'userDefined' in attribute %}
  {{attribute.type[0] | lower}}{{attribute.type[1:]}}Arr: {{attribute.type}}[] = [];
  {%- endif %}
  {%- endfor %}

  form: FormGroup = new FormGroup({
    id: new FormControl(null),
    {%- for attribute in entity.attributes %}
    {{attribute.key}}: new FormControl(null, Validators.required),
    {%- endfor %}
  });

  constructor(
    {%- for attribute in entity.attributes %}
    {%- if 'userDefined' in attribute %}
    private {{attribute.type[0] | lower}}{{attribute.type[1:]}}Service: {{attribute.type}}Service, 
    {%- endif %}
    {%- endfor %}) {}

  ngOnInit() {
    {%- for attribute in entity.attributes %}
    {%- if 'userDefined' in attribute %}
    this.{{attribute.type[0] | lower}}{{attribute.type[1:]}}Service.getAll().subscribe((arr: {{attribute.type}}[]) => {
      this.{{attribute.type[0] | lower}}{{attribute.type[1:]}}Arr = arr;
    });
    {%- endif %}
    {%- endfor %}
  }

  confirm() {
    if (!this.form.valid) {
      window.alert("Form isn't valid!");
      return;
    }

    this.process.emit(this.form.value);
    this.form.reset();
  }

  cancel() {
    this.form.reset();
  }

  compare(val1: any, val2: any) {
    return val1 && val2 ? val1.id === val2.id : val1 === val2;
  }
}
